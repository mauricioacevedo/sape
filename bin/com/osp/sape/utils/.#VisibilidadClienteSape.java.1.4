/**
 * Esta clase es la encargada de proporcionar las opciones de visibilidad
 * al Sistema SAPE, esto es, controlar las distintas partes que se van a 
 * desplegar del sistema a cada cliente
 */
package com.osp.sape.utils;

import java.io.File;
import java.io.IOException;
import java.util.HashMap;
import java.util.List;
import java.util.StringTokenizer;

import org.jdom.Document;
import org.jdom.Element;
import org.jdom.JDOMException;
import org.jdom.input.SAXBuilder;

import com.osp.sape.Exceptions.SapeAppException;
import com.sun.net.ssl.internal.ssl.Debug;

public class VisibilidadClienteSape {

	private org.apache.log4j.Logger logs=org.apache.log4j.LogManager.getLogger(getClass());
	public boolean debug = logs.isDebugEnabled();
	private static VisibilidadClienteSape _instancia = null;
	private Document configDoc;
	
	private HashMap mapaVistas;
	
	private static HashMap mapInvisibles;
	
	
	public VisibilidadClienteSape(File fileConfiguration) throws SapeAppException {
		
		if (logs.isInfoEnabled()) logs.info("[INICIA] VisibilidadClienteSape:fileCOnfiguration="+fileConfiguration+" [/INICIA]");
	
		mapaVistas = new HashMap();
		SAXBuilder builder = new SAXBuilder();
		try {
		    configDoc = builder.build(fileConfiguration);
		} catch (JDOMException e) {
		    logs.error(e);
		    throw new SapeAppException(e.getMessage());
		} catch (IOException e) {
		    logs.error(e);
		    throw new SapeAppException(e.getMessage());
		}

		cargarArchivo();
		
	}
	
	public static VisibilidadClienteSape getInstance() {
		if (_instancia == null) throw new RuntimeException("Falta inicializar la clase VisibilidadClienteSape");
		return _instancia;
	}
	
	
	public static void inicializar(String configPath) throws SapeAppException {
		
		File fConfiguracion = new File(configPath);

		if (!fConfiguracion.exists()) {
	       throw new SapeAppException("El archivo de configuracion " + fConfiguracion.getAbsolutePath() + "no Existe");
	   }
		
		_instancia = new VisibilidadClienteSape(fConfiguracion);
		
	}
	
	private void cargarArchivo() {
		if(debug)logs.debug("cargarArchivo");
		
		Element root = configDoc.getRootElement();
		
			//Comienzan los invisibles.
		List<Element> invisibles = root.getChildren("invisible");
		mapInvisibles = new HashMap(invisibles.size());
		for (Element item : invisibles) {
			mapInvisibles.put(item.getText(), new Boolean(true));
		}
		
		long time = System.currentTimeMillis();
		
		/*		//TODO aqui empiezan los tags templates
		
		root = root.getChild("templates");
		 
		
		
		
		mapaVistas = new HashMap();
		List plantillas = root.getChildren();
		
		int size =plantillas.size();
		for(int i=0;i<size;i++) {
			
			Element e = (Element) plantillas.get(i);
			
			String nombre = e.getAttributeValue("name");
			// en values debe quedar la disponibilidad de todas las plantillas
			// de la manera nombre,valor,nombre,valor...
			// donde 	nombre = nombre de la subopcion a controlar
			//			valor = (boolean) informa si se muestra o no la subopcion
			String values = e.getText();
			
			StringTokenizer stt = new StringTokenizer(values,",");
			
			HashMap valores = new HashMap();
			
			while(stt.hasMoreTokens()){
					
				String nameSuboption = stt.nextToken();
				
				if(nameSuboption == null)
					continue;
				
				if(!stt.hasMoreTokens()){
					logs.error("Hay un problema de balance en el archivo de configuracion visibilidadCliente.xml, plantilla="+nombre);
					continue;
				}
				String valueSuboption = stt.nextToken();
				valores.put(nameSuboption,valueSuboption);
			}
			if(valores.isEmpty()) {
				valores = null;
			}
			
			mapaVistas.put(nombre,valores);
		}
		*/
		long timeLast = System.currentTimeMillis();
		
		logs.info("Tiempo total de calculo: "+(double)((timeLast-time)));
	}
	
	public HashMap getMapaVistas(){
		return mapaVistas;
	}
	
	
	/**
	 * Busca si una opcion es visible para el sistema.
	 * Si la opcion no se encuentra en el mapInvisibles retorna true
	 * @param opcion
	 * @return
	 */
	public static boolean isVisible(String opcion) {
		System.out.println("isVisible: " + opcion);
		return (mapInvisibles.get(opcion) == null);
	}
	
	/**
	 * Este metodo administra las opciones de MantenimientoGeneral.jsp para que se muestren
	 * de manera dinamica y no se desorganicen.
	 * @return
	 */
	public static String getMenuTag(int linea){
				
		if(linea == 0){
			return "<tr>";
		} else if(linea == 1){
			return "";
		} else if(linea == 2){
			return "</tr><tr><td height=\"5%\">&nbsp;</td><td height=\"5%\">&nbsp;</td></tr><tr>";
		}
		return "";
		
	} 
	
}
