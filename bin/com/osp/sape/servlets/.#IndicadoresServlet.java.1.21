/*
 * Created on Apr 18, 2005
 */
package com.osp.sape.servlets;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.text.DecimalFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;

import javax.servlet.ServletException;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import net.sf.hibernate.HibernateException;

import com.gc.acceso.GestorServlet;
import com.gc.utils.Acciones;
import com.osp.sape.SapeConfiguration;
import com.osp.sape.Exceptions.SapeAppException;
import com.osp.sape.Exceptions.SapeDataException;
import com.osp.sape.data.DAOFactory;
import com.osp.sape.data.DAOFactoryImpl;
import com.osp.sape.data.EventoSapeDAO;
import com.osp.sape.data.PruebaBasicaDAO;
import com.osp.sape.data.ReportesDAO;
import com.osp.sape.data.RequerimientosColaDAO;
import com.osp.sape.data.SerieDAO;
import com.osp.sape.data.ServicioGUDE;
import com.osp.sape.data.ServicioIndicadoresOSSDAO;
import com.osp.sape.data.SiplexPROAutotestDAO;
import com.osp.sape.maestros.ServicioIndicadoresOSS;
import com.osp.sape.maestros.UserSipe;
import com.osp.sape.servicios.Alarma;
import com.osp.sape.servicios.Cola;
import com.osp.sape.servicios.ConfiguracionServicios;
import com.osp.sape.servicios.MedioBeeper;
import com.osp.sape.servicios.MedioCorreo;
import com.osp.sape.servicios.MedioInformar;
import com.osp.sape.servicios.MedioSmsOLA;

/**
 * 
 * @author Andres Aristizabal
 */
public class IndicadoresServlet extends GestorServlet {

    private org.apache.log4j.Logger logs;
    private Acciones acciones;
    private PruebaBasicaDAO pruebaBasicaDAO;    
    private ServicioIndicadoresOSSDAO servicioIndicadoresOSSDAO;
    private ConfiguracionServicios configuracionServicios;
    private RequerimientosColaDAO requerimientosColaDAO;
    private EventoSapeDAO eventoSapeDAO;
    private SiplexPROAutotestDAO siplexPROAutotest;
    private SerieDAO serieDAO;
    private ServicioGUDE servicioGUDE;
    private ReportesDAO reportesDAO;
    
    // esto es para agregarlo a las fechas y optimizar un poco la consulta
    private String horaIni = " 00:00:00", horaFin = " 23:59:59";
    public void init() throws ServletException {
        
        super.init();
        DAOFactory factory = DAOFactoryImpl.getInstance();
        logs = org.apache.log4j.LogManager.getLogger(getClass());
        acciones=Acciones.getInstance();
        
        servicioIndicadoresOSSDAO=factory.getServicioIndicadoresOSSDAO();
        pruebaBasicaDAO= factory.getPruebaBasicaDAO();
        requerimientosColaDAO=factory.getRequerimientosColaDAO();
        eventoSapeDAO=factory.getEventoSapeDAO();
        siplexPROAutotest = factory.getSiplexPROAutotestDAO();
        serieDAO = factory.getSerieDAO();
        servicioGUDE = factory.getServicioGUDE();
        reportesDAO = DAOFactoryImpl.getInstance().getReportesDAO();
        try {
            configuracionServicios = new ConfiguracionServicios(new File(SapeConfiguration.getInstance().getRutaServicios()));
        } catch (SapeAppException e) {
            logs.error(e);
        }

    }
    
    public void doGet(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
        String operacion = request.getParameter("operacion");
        if(logs.isDebugEnabled())logs.debug("doGet: operacion=["+operacion+"]");

        if(operacion == null || operacion.equals("inicio")){
            request.getRequestDispatcher(acciones.getTemplate("inicioIndicadores")).forward(request,response);
            return;
        } else if(operacion.equals("indicadoresColas")) {
            
            operacionIndicadoresColas(request,response);
            return;
        } else if(operacion.equals("graficaTSTLI")){
            //se genera la grafica dependiendo del tipo(cable,area_trabajo, etc)           
            operacionGraficaTSTLI(request,response);
            return;
        } else if(operacion.equals("graficaIndicadoresColas")) {
//            System.out.println("ENTRO AL METODO DE GRAFICAS DE COLAS!!!!");
            operacionGraficaIndicadores(request, response);
            return;
        }else if(operacion.equals("mantenimiento")){
            operacionMantenimiento(request,response);
            return;
        }else if(operacion.equals("eliminarCola")){
            
            operacionEliminarCola(request,response);
            return;
        }else if(operacion.equals("eliminarAlarma")){
            
            operacionEliminarAlarma(request,response);
            return;            
        }else if(operacion.equals("agregarAlarma")){
            request.getRequestDispatcher(acciones.getTemplate("agregarAlarma")).forward(request,response);
            return;
        }
        else if(operacion.equals("ejecuteAgregarAlarma")){
            operacionEjecuteAgregarAlarma(request,response);
            return;
        }else if(operacion.equals("ejecuteModificarAlarma")){
            //////////////////////////////////////////////////////////////////////////////
            operacionEjecuteModificarAlarma(request,response);
            return;
            //////////////////////////////////////////////////////////////////////////////
        }else if(operacion.equals("agregarCola")){
            
            request.getRequestDispatcher(acciones.getTemplate("agregarCola")).forward(request,response);
            return;
        }else if(operacion.equals("ejecuteAgregarCola")){
            operacionEjecuteAgregarCola(request,response);
            return;
        
        }else if(operacion.equals("mostrarAlarma")){
            operacionMostrarAlarma(request,response);
            return;
        } else if (operacion.equals("estadisticaUsuarios")) {
        	operacionEstadisticaUsuarios(request,response);
        	return;
        }  else if ( operacion.equals("estadisticaTelefonos") ) {
        	operacionEstadisticaTelefonos(request,response);
        	return;
        } else if (operacion.equals("ventanaEstadisticaUsuario")) {
        	operacionVentanaEstadisticaUsuario(request,response);
        	return;
        } else if ( operacion.equals("estadisticaHoras") ) {
        	operacionEstadisticaHoras(request,response);
        	return;
        } else if (operacion.equals("indicadoresCabezales")) {
        	operacionIndicadoresCabezales(request,response);
        	return;
        } else if(operacion.equals("estadisticaCodigosVer")){
        	operacionEstadisticaCodigosVer(request,response);
        	return;
        } else if(operacion.equals("probarCabezal")){
        	operacionProbarCabezal(request,response);
        	return;
        } else if (operacion.equals("detallePruebasUsuario")) {
        	detallePruebasUsuario(request, response);
        	return;
        } else if (operacion.equals("detallePruebasCodv")) {
        	detallePruebasCodv(request, response);
        	return;
        }    
        if (operacion.equals("estadisticoPorCentral")) {
        	estadisticoPorCentral(request, response);
        	return;
        }
    }
    
    
    private void estadisticoPorCentral (HttpServletRequest request, HttpServletResponse response) throws ServletException {    	
    	List listaEstadosCentral = null;
    	try {
    		listaEstadosCentral = pruebaBasicaDAO.getEstadosCentral(getFechaHoy(), getFechaHoy());
    	} catch (SapeDataException e) {
    		error(e, request, response);
    		return;
    	}
    	request.setAttribute("listaEstadosCentral", listaEstadosCentral);
    	redireccionarConPlantilla("estadisticoPorCentral", request, response);
    }
   
    
    private void operacionEstadisticaCodigosVer( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    
    	String fIni=	request.getParameter("fIni");
        String fFin=	request.getParameter("fFin");
    	
        if(fIni == null || fIni.equals("") || fFin ==null || fFin.equals("")){
        	fIni = getFechaHoy();
        	fFin = getFechaHoy();
        }
        
    	List l = null;
        
    	try {
			l=pruebaBasicaDAO.getEstadisticoPorCodv(fIni+horaIni,fFin+horaFin);
		} catch (SapeDataException e) {
			error(e,request,response);
			return;
		}
        
		request.setAttribute("fIni",fIni);
		request.setAttribute("fFin",fFin);
		request.setAttribute("lista",l);
		
    	redireccionarConPlantilla("estadisticoCodigosVer",request,response);
    }
    
    
    private void operacionEstadisticaHoras( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    	
    	String fIni=	request.getParameter("fIni");
        String fFin=	request.getParameter("fFin");    	
    	
        if(fIni == null || fFin ==null){
        	fIni ="";
        	fFin ="";
        }
        
        if(fIni.equals("") || fFin.equals("")){
            
        	Calendar cal = Calendar.getInstance();
        	DecimalFormat df2 = new DecimalFormat("00");
        	
        	String ano = df2.format(cal.get(Calendar.YEAR));
            String mes = df2.format(cal.get(Calendar.MONTH)+1);
            String day = df2.format(cal.get(Calendar.DAY_OF_MONTH));
            
            fIni =""+ano+"-"+mes+"-"+day;
        	fFin =""+ano+"-"+mes+"-"+day;
        }
    	
        List l = null;
        
        try {
			l = eventoSapeDAO.estadisticoPorHora(fIni+horaIni,fFin+horaFin);
		} catch (SapeDataException e) {
			error(e,request,response);
			return;
		}
		
		request.setAttribute("lista",l);
    	request.setAttribute("fIni",fIni);
		request.setAttribute("fFin",fFin);
		
		redireccionarConPlantilla("estadisticoHoras",request,response);
    }
    
    private void operacionProbarCabezal( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    	
    	
    	String id = request.getParameter("id");
    	
    	UserSipe us = (UserSipe)request.getSession().getAttribute("usuario");
    	
    	if(us == null){
    		redireccionar(acciones.getLoginPage(),request,response);
    		return;
    	}
    	
    	String nickName = us.getNick();
    	
    	if(nickName == null){
    		redireccionar(acciones.getLoginPage(),request,response);
    		return;
    	}
    	
    	String rta = null;
    	
    	try {
			rta = servicioGUDE.ejecutarServicio(nickName,"2",id);
		} catch (SapeDataException e) {
			error(e,request,response);
			return;
		}
		
//		System.out.println("RESPUESTA: "+rta);
		
		response.setContentType("text/html");
		PrintWriter out = response.getWriter();
		out.println("<script language=\"javascript\">");
		out.println("alert('RESPUESTA: "+rta+"');");
		out.println("location.href = \"/sape/actionSape?accion=indicadores&operacion=indicadoresCabezales\"");
		out.println("</script>");
    	return;
    }
    
    private void operacionIndicadoresCabezales( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    	
        String filtro = request.getParameter("filtro");
        String valorFiltro = request.getParameter("valorFiltro");
        String fIni=	request.getParameter("fIni");
        String fFin=	request.getParameter("fFin");
        
        String pagActual = request.getParameter("pagActual");
        String regPorPagina =request.getParameter("regPorPagina"); 
        String orderBy =request.getParameter("orderBy");
        
        if(regPorPagina==null || regPorPagina.equals(""))
        	regPorPagina = "100";
        
        String offset ="0";
        if(pagActual==null || pagActual.equals("")) {
        	pagActual = "1";
        } else {
	        try {
//	        	Integer.parseInt(pagActual);
	        	offset = String.valueOf((Integer.parseInt(pagActual)-1)*Integer.parseInt(regPorPagina));
	        } catch(NumberFormatException e) {
	        	pagActual = "1";
//	        	offset="0";
	        }
        }
	        
//        String offset ="";
        
//        if(pagActual.equals("1"))
//        	offset="0";
//        else
//        	offset = String.valueOf((Integer.parseInt(pagActual)-1)*Integer.parseInt(regPorPagina));

        if(orderBy==null || orderBy.equals(""))
        	orderBy = "id DESC";

        
        if(fIni == null || fFin ==null ||fIni.equals("") || fFin.equals("")){
            
        	Calendar cal = Calendar.getInstance();
        	DecimalFormat df2 = new DecimalFormat("00");
        	
        	String ano = df2.format(cal.get(Calendar.YEAR));
            String mes = df2.format(cal.get(Calendar.MONTH)+1);
            String day = df2.format(cal.get(Calendar.DAY_OF_MONTH));
            
            fIni =""+ano+"-"+mes+"-"+day;
        	fFin =""+ano+"-"+mes+"-"+day;
        }        
    	
    	List l = null,listaCentrales = null;
    	try {
			l = siplexPROAutotest.getRegistros(filtro,valorFiltro,fIni,fFin,regPorPagina,offset,orderBy);
			listaCentrales = serieDAO.getCentralesPorTecnologia("SIPLEXPRO");
		} catch (SapeDataException e) {
			if(logs.isDebugEnabled()) logs.debug(e);
			error(e,request,response);
			return;
		}
		
		double division = (Long.parseLong((String)l.get(0))/Double.parseDouble(regPorPagina));
        int totalPaginas = (int)Math.ceil(division);
        if(totalPaginas <=1) totalPaginas = 0;
			
		request.setAttribute("orderBy",orderBy);
		request.setAttribute("fIni",fIni);
		request.setAttribute("fFin",fFin);
		request.setAttribute("regPorPagina",regPorPagina);
		request.setAttribute("pagActual",pagActual);
		request.setAttribute("filtro",filtro);
		request.setAttribute("valorFiltro",valorFiltro);
		request.setAttribute("totalPaginas",String.valueOf(totalPaginas));
		
		String query = "&fIni="+fIni+"&fFin="+fFin+(filtro != null && !filtro.equals("")?"&filtro="+filtro+"&valorFiltro="+valorFiltro:"");
        request.setAttribute("query",query);
        request.setAttribute("cantidadTotalRegistros",l.get(0));
		
		request.setAttribute("listaAutotests",l.get(1));
		request.setAttribute("listaSites",l.get(2));
		request.setAttribute("listaCentrales",listaCentrales);
    	redireccionarConPlantilla("indicadoresCabezales",request,response);
    }
    

    
    private void operacionEstadisticaTelefonos ( HttpServletRequest request, HttpServletResponse response) throws ServletException, IOException {
    	
        String fIni=	request.getParameter("fIni");
        String fFin=	request.getParameter("fFin");    	
    	
        if(fIni == null || fFin ==null){
        	fIni ="";
        	fFin ="";
        }
        
        if(fIni.equals("") || fFin.equals("")){
                        
            fIni =getFechaHoy();
        	fFin =getFechaHoy();
        }
    	
        String telefono = request.getParameter("telefono");
        
        if(telefono != null && !telefono.equals("")) {
        	List l = null;
        	
        	
        	try {
				l = pruebaBasicaDAO.getEstadisticoTelefonos(telefono,fIni,fFin);
			} catch (SapeDataException e) {
				error(e,request,response);
				return;
			}
			
			
			//System.out.println("lista1:"+((List)l.get(0)).size()+" , lista2:"+((List)l.get(1)).size());
			request.setAttribute("listaCodigos",l.get(0));
			request.setAttribute("listaEstados",l.get(1));
			request.setAttribute("listaClientes",l.get(2));
			if(l.get(3) != null){
				request.setAttribute("listaPrimeraUltima",l.get(3));
			}
			
			
			
			
			request.setAttribute("telefono",telefono);
        }
    	request.setAttribute("fIni",fIni);
    	request.setAttribute("fFin",fFin);
    	redireccionarConPlantilla("estadisticoTelefonos",request,response);
    }

    
    private void operacionVentanaEstadisticaUsuario(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
    
    	String fIni=request.getParameter("fIni");
        String fFin=request.getParameter("fFin");
        
        String usuario = request.getParameter("usuario");
    	
        if(fIni == null || fFin == null || fIni.equals("") || fFin.equals("")){
            
        	Calendar cal = Calendar.getInstance();
        	DecimalFormat df2 = new DecimalFormat("00");
        	
        	String ano = df2.format(cal.get(Calendar.YEAR));
            String mes = df2.format(cal.get(Calendar.MONTH)+1);
            String day = df2.format(cal.get(Calendar.DAY_OF_MONTH));
            
            fIni =""+ano+"-"+mes+"-"+day;
        	fFin =""+ano+"-"+mes+"-"+day;
        }
        
    	
    	String datos = null;
    	try {
			datos = eventoSapeDAO.getInfoPorUsuario(usuario,fIni,fFin);
		} catch (SapeDataException e) {
			error(e,request,response);
			return;
		}
		
		request.setAttribute("datos",datos);

        redireccionarConPlantilla("graficaEfectividadPruebas",request,response);
		
    	
    }
    
    
    private void operacionEstadisticaUsuarios (HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
    	
        String fIni=request.getParameter("fIni");
        String fFin=request.getParameter("fFin");
        
        String usuario = request.getParameter("usuario");
    	
        if(fIni == null || fFin == null || fIni.equals("") || fFin.equals("")){
            
        	Calendar cal = Calendar.getInstance();
        	DecimalFormat df2 = new DecimalFormat("00");
        	
        	String ano = df2.format(cal.get(Calendar.YEAR));
            String mes = df2.format(cal.get(Calendar.MONTH)+1);
            String day = df2.format(cal.get(Calendar.DAY_OF_MONTH));
            
            fIni =""+ano+"-"+mes+"-"+day;
        	fFin =""+ano+"-"+mes+"-"+day;
        }
        
    	
    	List l = null;
    	
    	try {
			l = eventoSapeDAO.getPruebasPorUsuarios(fIni,fFin,usuario);
		} catch (SapeDataException e) {
			error(e,request,response);
			return;
		}
		
		request.setAttribute("fIni",fIni);
		request.setAttribute("fFin",fFin);
		request.setAttribute("listaEventos",l);
		redireccionarConPlantilla("pruebasPorUsuario",request,response);
    }

    private void operacionMostrarAlarma (HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
	    String cola=request.getParameter("cola");
	    Alarma al=null;
	    try {
	        al=configuracionServicios.getAlarma(cola);
	    } catch (SapeAppException e) {
	        error(e,request,response);
	        return;
	    }
	    
	    if(al == null){
	        error("Ocurrio un error en la carga de la alarma!!!!",request,response);
	        return;
	    }
	    
	
	    MedioInformar mi = al.getMedio();
	    
	    String medio= "";
	    String valorMedio="";
	    
	    if(mi instanceof MedioBeeper){
	        
	        MedioBeeper mb = (MedioBeeper)mi;
	        medio=mb.getMedio();
	        valorMedio=mb.getCodigo();
	    }else if(mi instanceof MedioSmsOLA){
	        
	        MedioSmsOLA ms = (MedioSmsOLA)mi;
	        medio=ms.getMedio();
	        valorMedio=ms.getTelefono();
	    }else{
	    
	        MedioCorreo mc =(MedioCorreo)mi;
	        medio=mc.getMedio();
	        valorMedio=mc.getDireccion();                
	    }
	    request.setAttribute("medio",medio);
	    request.setAttribute("valorMedio",valorMedio);
	    request.setAttribute("alarma",al);            
	    request.getRequestDispatcher(acciones.getTemplate("mostrarAlarma")).forward(request,response);
	    return;
	}
    
    private void operacionEjecuteAgregarCola(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
	    String nombreCola=request.getParameter("nombreCola");
	    String descripcion=request.getParameter("descripcion");
	    
	    try {
	        configuracionServicios.adicionarCola(new Cola(nombreCola,descripcion));
	    } catch (SapeAppException e) {
	        error(e,request,response);
	        return;
	    }
	    
	    operacionMantenimiento(request,response);
	    return;
	}
    
    private void operacionEliminarAlarma(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
    
	    String cola = request.getParameter("nombreCola");
	    
	    try {
	        configuracionServicios.eliminarAlarma(cola);
	    } catch (SapeAppException e) {
	        error("No fue posible eliminar esta alarma de la cola:"+cola+".\n"+e.toString(),request,response);
	        return;
	    }
	    operacionMantenimiento(request,response);
	    return;
	}
    
    private void operacionEjecuteModificarAlarma(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
        String nombreCola=request.getParameter("nombreCola");
        String limite=request.getParameter("limite");
        String avisar=request.getParameter("avisar");
        String mensaje=request.getParameter("mensaje");
        String medio=request.getParameter("medio");
        String valorMedio=request.getParameter("valorMedio");
        //String recordar=request.getParameter("recordar");

        int limit=0;
        
        try{
            //rec=Integer.parseInt(recordar);
            limit=Integer.parseInt(limite);
        }catch (NumberFormatException e) {
            error(e,request,response);
            return;
        }
        
        Alarma ali=null;
        
        if(medio.equals("correo")){
            
            MedioCorreo mc = new MedioCorreo(valorMedio);
            //XXX El tiempo de recordacion no se aplica por ahora(se dejo de 20 por default
            ali=new Alarma(nombreCola,limit,avisar,mensaje,mc,20); 

        }else if(medio.equals("smsOla")){
            
            MedioSmsOLA ms = new MedioSmsOLA(valorMedio);
            ali=new Alarma(nombreCola,limit,avisar,mensaje,ms,20);
        }else{
            MedioBeeper mb = new MedioBeeper(null,valorMedio);
            ali=new Alarma(nombreCola,limit,avisar,mensaje,mb,20);                
        }

        try {
            configuracionServicios.eliminarAlarma(nombreCola);
            configuracionServicios.adicionarAlarma(ali);
        } catch (SapeAppException e1) {
            error(e1,request,response);
            return;
        }
        
//        System.out.println("MODIFICO LA ALARMA");
        
        response.setContentType("text/html");
        PrintWriter out=response.getWriter();
        
        out.print("<script type=\"text/javascript\">\n");
        out.print("window.close(); </script>\n");
        
        //response.sendRedirect("/sape/indicadores/IndicadoresServlet?operacion=mantenimiento");
        return;
    
    }
    
    //TODO revisar para que este metodo
    private void detallePruebasCodv(HttpServletRequest request, HttpServletResponse response) throws ServletException {
    	
    }
    
    
    private void detallePruebasUsuario(HttpServletRequest request, HttpServletResponse response) throws ServletException {
        if (logs.isDebugEnabled()) logs.debug("detallePruebasUsuario");
    	
    	String usuario = request.getParameter("usuario");
    	if (usuario == null || usuario.equals("")) {
    		error("Usario no valido", request, response);
    		return;
    	}
    	
    	String opcion = request.getParameter("opcion");     
        String fIni=	request.getParameter("fechaIni");
        String fFin=	request.getParameter("fechaFin");
         
        String pagActual = request.getParameter("pagActual");
        String regPorPagina =request.getParameter("regPorPagina"); 
        String orderBy =request.getParameter("orderBy");
        
        
        
//        System.out.println("registros por pagina: "+regPorPagina);
//        System.out.println("la opcion: "+opcion);
        
                        
        if(fIni == null || fFin ==null){
        	fIni ="";
        	fFin ="";
        }
        
        if(fIni.equals("") || fFin.equals("")) {
//            Calendar cal = Calendar.getInstance();
//            int ano = cal.get(Calendar.YEAR);
//            int mes=cal.get(Calendar.MONTH)+1;
//            int day=cal.get(Calendar.DAY_OF_MONTH);
//            fIni =""+ano+"-"+mes+"-"+day;
//        	fFin =""+ano+"-"+mes+"-"+day;
        	fIni = getFechaHoy();
        	fFin = getFechaHoy();
        }
        
        try{
        	int pagina = Integer.parseInt(pagActual);
        	if(pagina <= 0)
        		pagActual = "1";
        }catch(NumberFormatException e){
        	pagActual = "1";
        }
        
        
        String offset ="";
        
        if(regPorPagina==null)
        	regPorPagina = "100";
        if(regPorPagina.equals(""))
        	regPorPagina = "100";
        
        if(pagActual==null)
        	pagActual = "1";
        if(pagActual.equals(""))
        	pagActual = "1";
                
        if(pagActual.equals("1"))
        	offset="0";
        else
        	offset = String.valueOf((Integer.parseInt(pagActual)-1)*Integer.parseInt(regPorPagina));
        	
        if(orderBy==null || orderBy.equals("")) {
       		orderBy = " ticket DESC";	
        }
              
            	
            List l = null;
            try {
            	l = reportesDAO.getRegistros("",opcion,usuario,fIni,fFin,regPorPagina,offset,orderBy);
            } catch (SapeDataException e) {
            	error(e, request, response);
            	return;
            }
//          System.out.println("Tamano de la lista!!!!!: "+((List)l.get(1)).size());
            
            request.setAttribute("listaEventos",l.get(1));
            
            request.setAttribute("fIni",fIni);
            request.setAttribute("fFin",fFin);
            
            request.setAttribute("offset",offset);
            request.setAttribute("regPorPagina",regPorPagina);
            request.setAttribute("pagActual",pagActual);

            double division = Double.parseDouble((String)l.get(0))/Double.parseDouble(regPorPagina);
            int totalPaginas = (int)Math.ceil(division);
            if(totalPaginas <=1) totalPaginas = 0;
            
            
            	//para pasarle a la opcion de exportar.
            String query = "&opcion=cliente&valor=" + usuario + "&fechaIni=" + fIni + "&fechaFin=" + fFin;
            request.setAttribute("query", query);
            
            request.setAttribute("totalPaginas",String.valueOf(totalPaginas));
                       
            request.setAttribute("orderBy",orderBy);
            request.setAttribute("cantidadTotalRegistros",l.get(0));
            
            request.setAttribute("msgCentral","Numero de registros "+l.get(0)+". Usuario: " + usuario);
            redireccionarConPlantilla("ventanaConsultaPruebas", request,response);
    }
    
    
    private void operacionEjecuteAgregarAlarma(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
        
        String nombreCola=request.getParameter("nombreCola");
        String limite=request.getParameter("limite");
        String avisar=request.getParameter("avisar");
        String mensaje=request.getParameter("mensaje");
        String medio=request.getParameter("medio");
        String valorMedio=request.getParameter("valorMedio");
        //String recordar=request.getParameter("recordar");
    
        int limit=0;
        
        try{
            //rec=Integer.parseInt(recordar);
            limit=Integer.parseInt(limite);
        }catch (NumberFormatException e) {
            error(e,request,response);
            return;
        }
        
        Alarma ali=null;
        
        if(medio.equals("correo")){
            
            MedioCorreo mc = new MedioCorreo(valorMedio);
            //XXX El tiempo de recordacion no se aplica por ahora(se dejo de 20 por default
            ali=new Alarma(nombreCola,limit,avisar,mensaje,mc,20); 
            
        }if(medio.equals("smsOla")){
            
            MedioSmsOLA ms = new MedioSmsOLA(valorMedio);
            ali=new Alarma(nombreCola,limit,avisar,mensaje,ms,20);
        }else{
            MedioBeeper mb = new MedioBeeper(null,valorMedio);
            ali=new Alarma(nombreCola,limit,avisar,mensaje,mb,20);                
        }
        
        try {
            configuracionServicios.adicionarAlarma(ali);
        } catch (SapeAppException e1) {
            
            error(e1,request,response);
            return;
        }
        
        if(logs.isDebugEnabled())logs.debug("AGREGO LA ALARMA!!!!");
        
        operacionMantenimiento(request,response);
        return;

    }
    
    
    
    private void operacionIndicadoresColas(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
		try {
		    ArrayList l=configuracionServicios.getAllColas();
//		    System.out.println("la lista tiene:"+l);
		    request.setAttribute("listaColas",l);
		} catch (SapeAppException e) {
		    error(e,request,response);
		    return;
		}
		request.getRequestDispatcher(acciones.getTemplate("inicioIndicadoresColas")).forward(request,response);
		return;
    }
    private void operacionGraficaTSTLI(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
        String tipo = request.getParameter("tipo");
        String data=null;
        int par = -1;
        if(tipo != null){
            
            if(tipo.equals("armario_id") || tipo.equals("cable")){
                String tope = request.getParameter("tope");
                request.setAttribute("opcionGraficaArmarios","true");
                if(tope != null){
//                    System.out.println("El tope es: "+tope);
                    int top = 0;
                    try{
                        top = Integer.parseInt(tope);
                    }catch(NumberFormatException err){
                        error("El valor debe ser numerico.\nERROR: "+err.toString(),request,response);
                        return;
                    }
                    par=top;
                }
            }
            Long count = null;
	        try {
	        	List l =requerimientosColaDAO.getIndicadoresTSTLI(tipo, par);
	            if(l == null)
	            	data = null;
	            else {
	            	data = (String)l.get(0);
	            	count = (Long)l.get(1);
	            	System.out.println("el tamano de la ultima lista: "+l.size());
	            	if(l.size() == 3) {
	            		par = Integer.parseInt((String)l.get(2));
	            		
//	            		System.out.println("EL par kedo: "+par);
	            	}
	            	
	            }
	            
	        } catch (HibernateException e1) {error(e1,request,response);}
	    	catch (SapeDataException e) {error(e,request,response);return;
	    	}
	    	
	    	if(data == null){
	    	    error("No se han encontrado datos para mostrar.",request,response);
	    	    return;
	    	}

	    	
	    	if(data.startsWith("Ocurrio una exepcion")){
	    	    error(data,request,response);
	    	    return;
	    	}
	    	
	    	String dt = null;
	    	
	    	if(tipo.equals("cable")) dt ="Cable";
	    	else if(tipo.equals("tipo_nodo")) dt ="Tipo de Nodo";
	    	else if(tipo.equals("area_trabajo_id")) dt ="Area de Trabajo";
	    	else if(tipo.equals("armario_id")) dt ="Armario";
	    	else if(tipo.equals("subzona_id")) dt ="Subzona";
	    	data = "Grafica de TSTLI por "+dt+", "+count.toString()+" registros.*"+dt+"*Cantidad*"+data;
            request.setAttribute("datos",data);
            request.setAttribute("tipo",tipo);
            request.setAttribute("tope",String.valueOf(par));
            request.getRequestDispatcher(acciones.getTemplate("graficaTSTLI")).forward(request,response);
    	}else{
    	    error("Falta el parametro tipo de grafica!!",request,response);
    	    return;
    	}
        
    }
    
    
    public void doPost(HttpServletRequest request, HttpServletResponse response)throws ServletException,IOException {
        doGet(request,response);
    }    
    
//    METODOS VARIOS
    
    private void operacionEliminarCola(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
	    String cola = request.getParameter("nombreCola");
	    
	    try {
	        configuracionServicios.eliminarCola(cola);
	    } catch (SapeAppException e) {
	        error("No fue posible eliminar esta cola de la lista:\n"+e.toString(),request,response);
	        return;
	    }
	    operacionMantenimiento(request,response);
	    return;
    }
    
    
    private void operacionMantenimiento(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {
	    List listaColas=null,listaAlarmas=null;
	    try {
	        listaColas = configuracionServicios.getAllColas();
	        listaAlarmas = configuracionServicios.getAllAlarmas();
	    } catch (SapeAppException e) {
	        error(e,request,response);
	        return;//buzongestion@eeppm.com //sivarr
	    }
	    
	    request.setAttribute("listaColas",listaColas);
	    request.setAttribute("listaAlarmas",listaAlarmas);
	    request.getRequestDispatcher(acciones.getTemplate("mantenimientoColas")).forward(request,response);
    }
    
    private void operacionGraficaIndicadores(HttpServletRequest request, HttpServletResponse response) throws IOException, ServletException {

        System.out.println("indicador COLAS LLEGO HASTA ACA!!!");
        StringBuffer parametrosP = new StringBuffer(10);//ESTOS DOS SE IMPLEMENTAN SI SOLICITA UNA GRAFICA CON
        StringBuffer parametrosC = new StringBuffer(10);//LOS 2 ESTADOS.
        
        Date fechaUltimaCarga = null;
        boolean firtLast = false;//para ke solo tome la ultima fecha en fecha de carga.
        String estado = request.getParameter("radioEstado");
  
        String co[] = request.getParameterValues("chkCola");
        System.out.println("valor del vector es="+co.length);

        ServicioIndicadoresOSS p =null;
        ServicioIndicadoresOSS c=null;
        long inicioTime=System.currentTimeMillis();
        for (int i = 0; i < co.length; i++) {
            try {
                if (estado.equals("AMBAS") || estado.equals("PENDI")) {
                    p = servicioIndicadoresOSSDAO.getServicio(co[i],"PENDI");
                }
                if (estado.equals("AMBAS") || estado.equals("CUMPL")) {
                    c = servicioIndicadoresOSSDAO.getServicio(co[i],"CUMPL");
                }
                
            }catch(SapeDataException e){
//                e.printStackTrace();
                error(e,request,response);
                return;
            }
            if(p == null){
                parametrosP.append(co[i]+"*0*");
            }else{
                parametrosP.append(co[i]+"*"+ p.getCantidad() + "*");
                
                if(!firtLast){
                	fechaUltimaCarga = p.getFechaCarga();
                	firtLast = true;
                }
                
                //System.out.println("Ultima fecha de carga P="+fechaUltimaCarga);
            }
            
            if(c ==null){
                parametrosC.append(co[i]+"*0*");
            }else{
                parametrosC.append(co[i]+"*"+ c.getCantidad() + "*");
                	//actualizo fechaUltimaCarga con la del ultimo registro que voy encontrando.
                //fechaUltimaCarga = c.getFechaCarga();
                //System.out.println("Ultima fecha de carga C="+fechaUltimaCarga);
            }                   
//                System.out.println("fecha: " + fechaUltimaCarga);
        } //fin del for
            System.out.println("TIEMPO TOTAL DE CONSULTAS: "+(System.currentTimeMillis()-inicioTime));
        
            StringBuffer pp = new StringBuffer(10);
            StringBuffer pc = new StringBuffer(10);
            
            	//cuando se solicita solamente una cola de ambos estados
            	//se muestran las dos barras en una sola grafica.
            if(estado.equals("AMBAS")) {
//              ESTE CODIGO FUNCIONA CON LAS VERSIONES VIEJAS DE JFREECHART
//                pp.append("COLAS PENDIENTES Y CUMPLIDAS*ESTADO*CANTIDAD*");
//                pp.append("PENDIENTE_"+parametrosP.toString());
//                pp.append("CUMPLIDO_"+parametrosC.toString());
//                estado = "PENDI";// SE LE CAMBIO EL ESTADO PARA QUE MUESTRE
//                				///SOLO UNA GRAFICA Y NO PARTA LA PANTALLA
                //ESTE CODIGO FUNCIONA CON LAS VERSIONES VIEJAS DE JFREECHART
                if(co.length == 1){//pidio los dos estados de una sola cola
                    
                    pp.append("1-2");
                    pc.append("AMBAS*COLA*CANTIDAD*");
                    pc.append(parametrosP);
                    pc.append(parametrosC);
                    Alarma alo=null;
                    try {
//                        System.out.println("configuracion servicios es: " + configuracionServicios);
//                        System.out.println("p es> " + p);
                        alo=configuracionServicios.getAlarma(p.getCola());
//                        System.out.println("ali queda: " + alo);
                    } catch (SapeAppException e) {
                        error(e,request,response);
                        return;
                    }
                    
                    if(alo != null){//TENIA ALARMA ESA COLA
                        //esto se hara para obtener el limite de desbordamiento de la
                        //cola y graficar este en el applet!!!!
                        System.out.println("TENIA ALARMA ASOCIADA!!!");
                        request.setAttribute("limite",String.valueOf(alo.getLimite()));
                    }
                    
                } else {
	                pp.append("PENDIENTE.*COLA*CANTIDAD*");
	                pp.append(parametrosP);
	                pc.append("CUMPLIDO.*COLA*CANTIDAD*");
	                pc.append(parametrosC);                    
                }
            }else if( estado.equals("PENDI")){
                
                pp.append("COLAS PENDIENTES.*COLA*CANTIDAD*");
                pp.append(parametrosP);
                
                pc.append("VACIO");
//                pp.append("COLAS PENDIENTES.*ESTADO*CANTIDAD*");
//                pp.append(parametrosP);
//                pc.append("COLAS CUMPLIDAS.*ESTADO*CANTIDAD*");
//                pc.append(parametrosC);
            }else{
                pc.append("COLAS CUMPLIDAS.*ESTADO*CANTIDAD*");
                pc.append(parametrosC);
                pp.append("VACIO");
            }
            
            request.setAttribute("fechaUltimaCarga", fechaUltimaCarga);
            request.setAttribute("graficasMostrar", estado);
            request.setAttribute("parametrosP",pp.toString());
            request.setAttribute("parametrosC",pc.toString());
            
            request.getRequestDispatcher(acciones.getTemplate("mostrarIndicadorDoble")).forward(request,response);
        
    } //fin de graficaIndicadores
    
    private String getFechaHoy() {
    	Calendar cal = Calendar.getInstance();
    	DecimalFormat df2 = new DecimalFormat("00");
    	
    	String ano = df2.format(cal.get(Calendar.YEAR));
        String mes = df2.format(cal.get(Calendar.MONTH)+1);
        String day = df2.format(cal.get(Calendar.DAY_OF_MONTH));
        
        return ano+"-"+mes+"-"+day;
    	
    }
}
